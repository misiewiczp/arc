"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class req_plan_path_t(object):
    __slots__ = ["timestamp", "src", "dst", "yaw", "nroad_points", "road_x", "road_y", "road_w"]

    __typenames__ = ["int64_t", "double", "double", "double", "int32_t", "double", "double", "double"]

    __dimensions__ = [None, [2], [2], None, None, ["nroad_points"], ["nroad_points"], ["nroad_points"]]

    def __init__(self):
        self.timestamp = 0
        self.src = [ 0.0 for dim0 in range(2) ]
        self.dst = [ 0.0 for dim0 in range(2) ]
        self.yaw = 0.0
        self.nroad_points = 0
        self.road_x = []
        self.road_y = []
        self.road_w = []

    def encode(self):
        buf = BytesIO()
        buf.write(req_plan_path_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>2d', *self.src[:2]))
        buf.write(struct.pack('>2d', *self.dst[:2]))
        buf.write(struct.pack(">di", self.yaw, self.nroad_points))
        buf.write(struct.pack('>%dd' % self.nroad_points, *self.road_x[:self.nroad_points]))
        buf.write(struct.pack('>%dd' % self.nroad_points, *self.road_y[:self.nroad_points]))
        buf.write(struct.pack('>%dd' % self.nroad_points, *self.road_w[:self.nroad_points]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != req_plan_path_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return req_plan_path_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = req_plan_path_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.src = struct.unpack('>2d', buf.read(16))
        self.dst = struct.unpack('>2d', buf.read(16))
        self.yaw, self.nroad_points = struct.unpack(">di", buf.read(12))
        self.road_x = struct.unpack('>%dd' % self.nroad_points, buf.read(self.nroad_points * 8))
        self.road_y = struct.unpack('>%dd' % self.nroad_points, buf.read(self.nroad_points * 8))
        self.road_w = struct.unpack('>%dd' % self.nroad_points, buf.read(self.nroad_points * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if req_plan_path_t in parents: return 0
        tmphash = (0x2e1f2ea236fd1f2d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if req_plan_path_t._packed_fingerprint is None:
            req_plan_path_t._packed_fingerprint = struct.pack(">Q", req_plan_path_t._get_hash_recursive([]))
        return req_plan_path_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

