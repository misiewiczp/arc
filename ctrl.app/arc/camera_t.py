"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class camera_t(object):
    __slots__ = ["timestamp", "x", "y", "radius"]

    __typenames__ = ["int64_t", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.x = 0
        self.y = 0
        self.radius = 0

    def encode(self):
        buf = BytesIO()
        buf.write(camera_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbb", self.timestamp, self.x, self.y, self.radius))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != camera_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return camera_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = camera_t()
        self.timestamp, self.x, self.y, self.radius = struct.unpack(">qbbb", buf.read(11))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if camera_t in parents: return 0
        tmphash = (0x9b9a7c1956359251) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if camera_t._packed_fingerprint is None:
            camera_t._packed_fingerprint = struct.pack(">Q", camera_t._get_hash_recursive([]))
        return camera_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

